   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_adc.c"
  15              		.section	.text.ADC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	ADC_DeInit
  18              		.thumb
  19              		.thumb_func
  21              	ADC_DeInit:
  22              		@ args = 0, pretend = 0, frame = 0
  23              		@ frame_needed = 0, uses_anonymous_args = 0
  24 0000 08B5     		push	{r3, lr}
  25 0002 164B     		ldr	r3, .L7
  26 0004 9842     		cmp	r0, r3
  27 0006 0DD0     		beq	.L2
  28 0008 03F58063 		add	r3, r3, #1024
  29 000c 9842     		cmp	r0, r3
  30 000e 19D0     		beq	.L3
  31 0010 03F5A053 		add	r3, r3, #5120
  32 0014 9842     		cmp	r0, r3
  33 0016 0DD0     		beq	.L4
  34 0018 BDE80840 		pop	{r3, lr}
  35 001c 1048     		ldr	r0, .L7+4
  36 001e B621     		movs	r1, #182
  37 0020 FFF7FEBF 		b	assert_err
  38              	.L2:
  39 0024 4FF40070 		mov	r0, #512
  40 0028 0121     		movs	r1, #1
  41 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  42 002e 4FF40070 		mov	r0, #512
  43 0032 0EE0     		b	.L5
  44              	.L4:
  45 0034 4FF40040 		mov	r0, #32768
  46 0038 0121     		movs	r1, #1
  47 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  48 003e 4FF40040 		mov	r0, #32768
  49 0042 06E0     		b	.L5
  50              	.L3:
  51 0044 4FF48060 		mov	r0, #1024
  52 0048 0121     		movs	r1, #1
  53 004a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  54 004e 4FF48060 		mov	r0, #1024
  55              	.L5:
  56 0052 0021     		movs	r1, #0
  57 0054 BDE80840 		pop	{r3, lr}
  58 0058 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  59              	.L8:
  60              		.align	2
  61              	.L7:
  62 005c 00240140 		.word	1073816576
  63 0060 00000000 		.word	.LC0
  65              		.section	.text.ADC_Init,"ax",%progbits
  66              		.align	1
  67              		.global	ADC_Init
  68              		.thumb
  69              		.thumb_func
  71              	ADC_Init:
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74 0000 38B5     		push	{r3, r4, r5, lr}
  75 0002 354B     		ldr	r3, .L35
  76 0004 0546     		mov	r5, r0
  77 0006 9842     		cmp	r0, r3
  78 0008 0C46     		mov	r4, r1
  79 000a 0BD0     		beq	.L10
  80 000c 03F58063 		add	r3, r3, #1024
  81 0010 9842     		cmp	r0, r3
  82 0012 07D0     		beq	.L10
  83 0014 03F5A053 		add	r3, r3, #5120
  84 0018 9842     		cmp	r0, r3
  85 001a 03D0     		beq	.L10
  86 001c 2F48     		ldr	r0, .L35+4
  87 001e DF21     		movs	r1, #223
  88 0020 FFF7FEFF 		bl	assert_err
  89              	.L10:
  90 0024 2368     		ldr	r3, [r4]
  91 0026 23F48032 		bic	r2, r3, #65536
  92 002a 33F44033 		bics	r3, r3, #196608
  93 002e 09D0     		beq	.L11
  94 0030 B3F5802F 		cmp	r3, #262144
  95 0034 06D0     		beq	.L11
  96 0036 B2F5002F 		cmp	r2, #524288
  97 003a 03D0     		beq	.L11
  98 003c 2748     		ldr	r0, .L35+4
  99 003e E021     		movs	r1, #224
 100 0040 FFF7FEFF 		bl	assert_err
 101              	.L11:
 102 0044 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 103 0046 012B     		cmp	r3, #1
 104 0048 03D9     		bls	.L12
 105 004a 2448     		ldr	r0, .L35+4
 106 004c E121     		movs	r1, #225
 107 004e FFF7FEFF 		bl	assert_err
 108              	.L12:
 109 0052 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 110 0054 012B     		cmp	r3, #1
 111 0056 03D9     		bls	.L13
 112 0058 2048     		ldr	r0, .L35+4
 113 005a E221     		movs	r1, #226
 114 005c FFF7FEFF 		bl	assert_err
 115              	.L13:
 116 0060 A368     		ldr	r3, [r4, #8]
 117 0062 33F4C023 		bics	r3, r3, #393216
 118 0066 06D0     		beq	.L14
 119 0068 B3F5002F 		cmp	r3, #524288
 120 006c 03D0     		beq	.L14
 121 006e 1B48     		ldr	r0, .L35+4
 122 0070 E321     		movs	r1, #227
 123 0072 FFF7FEFF 		bl	assert_err
 124              	.L14:
 125 0076 E368     		ldr	r3, [r4, #12]
 126 0078 33F40062 		bics	r2, r3, #2048
 127 007c 03D0     		beq	.L15
 128 007e 1748     		ldr	r0, .L35+4
 129 0080 E421     		movs	r1, #228
 130 0082 FFF7FEFF 		bl	assert_err
 131              	.L15:
 132 0086 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 133 0088 013B     		subs	r3, r3, #1
 134 008a DBB2     		uxtb	r3, r3
 135 008c 0F2B     		cmp	r3, #15
 136 008e 03D9     		bls	.L16
 137 0090 1248     		ldr	r0, .L35+4
 138 0092 E521     		movs	r1, #229
 139 0094 FFF7FEFF 		bl	assert_err
 140              	.L16:
 141 0098 6A68     		ldr	r2, [r5, #4]
 142 009a 2368     		ldr	r3, [r4]
 143 009c 22F47022 		bic	r2, r2, #983040
 144 00a0 22F48072 		bic	r2, r2, #256
 145 00a4 1343     		orrs	r3, r3, r2
 146 00a6 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 147 00a8 43EA0223 		orr	r3, r3, r2, lsl #8
 148 00ac 6B60     		str	r3, [r5, #4]
 149 00ae A268     		ldr	r2, [r4, #8]
 150 00b0 E368     		ldr	r3, [r4, #12]
 151 00b2 A968     		ldr	r1, [r5, #8]
 152 00b4 1A43     		orrs	r2, r2, r3
 153 00b6 0A4B     		ldr	r3, .L35+8
 154 00b8 0B40     		ands	r3, r3, r1
 155 00ba 1343     		orrs	r3, r3, r2
 156 00bc 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 157 00be 43EA4203 		orr	r3, r3, r2, lsl #1
 158 00c2 AB60     		str	r3, [r5, #8]
 159 00c4 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 160 00c6 EA6A     		ldr	r2, [r5, #44]
 161 00c8 013B     		subs	r3, r3, #1
 162 00ca 22F47002 		bic	r2, r2, #15728640
 163 00ce DBB2     		uxtb	r3, r3
 164 00d0 42EA0353 		orr	r3, r2, r3, lsl #20
 165 00d4 EB62     		str	r3, [r5, #44]
 166 00d6 38BD     		pop	{r3, r4, r5, pc}
 167              	.L36:
 168              		.align	2
 169              	.L35:
 170 00d8 00240140 		.word	1073816576
 171 00dc 00000000 		.word	.LC0
 172 00e0 FDF7F1FF 		.word	-919555
 174              		.section	.text.ADC_StructInit,"ax",%progbits
 175              		.align	1
 176              		.global	ADC_StructInit
 177              		.thumb
 178              		.thumb_func
 180              	ADC_StructInit:
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184 0000 0023     		movs	r3, #0
 185 0002 0360     		str	r3, [r0]
 186 0004 0371     		strb	r3, [r0, #4]
 187 0006 4371     		strb	r3, [r0, #5]
 188 0008 8360     		str	r3, [r0, #8]
 189 000a C360     		str	r3, [r0, #12]
 190 000c 0123     		movs	r3, #1
 191 000e 0374     		strb	r3, [r0, #16]
 192 0010 7047     		bx	lr
 194              		.section	.text.ADC_Cmd,"ax",%progbits
 195              		.align	1
 196              		.global	ADC_Cmd
 197              		.thumb
 198              		.thumb_func
 200              	ADC_Cmd:
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 38B5     		push	{r3, r4, r5, lr}
 204 0002 124B     		ldr	r3, .L45
 205 0004 0446     		mov	r4, r0
 206 0006 9842     		cmp	r0, r3
 207 0008 0D46     		mov	r5, r1
 208 000a 0CD0     		beq	.L39
 209 000c 03F58063 		add	r3, r3, #1024
 210 0010 9842     		cmp	r0, r3
 211 0012 08D0     		beq	.L39
 212 0014 03F5A053 		add	r3, r3, #5120
 213 0018 9842     		cmp	r0, r3
 214 001a 04D0     		beq	.L39
 215 001c 0C48     		ldr	r0, .L45+4
 216 001e 4FF49771 		mov	r1, #302
 217 0022 FFF7FEFF 		bl	assert_err
 218              	.L39:
 219 0026 012D     		cmp	r5, #1
 220 0028 05D9     		bls	.L40
 221 002a 0948     		ldr	r0, .L45+4
 222 002c 40F22F11 		movw	r1, #303
 223 0030 FFF7FEFF 		bl	assert_err
 224 0034 00E0     		b	.L41
 225              	.L40:
 226 0036 1DB1     		cbz	r5, .L42
 227              	.L41:
 228 0038 A368     		ldr	r3, [r4, #8]
 229 003a 43F00103 		orr	r3, r3, #1
 230 003e 02E0     		b	.L44
 231              	.L42:
 232 0040 A368     		ldr	r3, [r4, #8]
 233 0042 23F00103 		bic	r3, r3, #1
 234              	.L44:
 235 0046 A360     		str	r3, [r4, #8]
 236 0048 38BD     		pop	{r3, r4, r5, pc}
 237              	.L46:
 238 004a 00BF     		.align	2
 239              	.L45:
 240 004c 00240140 		.word	1073816576
 241 0050 00000000 		.word	.LC0
 243              		.section	.text.ADC_DMACmd,"ax",%progbits
 244              		.align	1
 245              		.global	ADC_DMACmd
 246              		.thumb
 247              		.thumb_func
 249              	ADC_DMACmd:
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 38B5     		push	{r3, r4, r5, lr}
 253 0002 104B     		ldr	r3, .L54
 254 0004 0446     		mov	r4, r0
 255 0006 9842     		cmp	r0, r3
 256 0008 0D46     		mov	r5, r1
 257 000a 08D0     		beq	.L48
 258 000c 03F5C053 		add	r3, r3, #6144
 259 0010 9842     		cmp	r0, r3
 260 0012 04D0     		beq	.L48
 261 0014 0C48     		ldr	r0, .L54+4
 262 0016 40F24711 		movw	r1, #327
 263 001a FFF7FEFF 		bl	assert_err
 264              	.L48:
 265 001e 012D     		cmp	r5, #1
 266 0020 05D9     		bls	.L49
 267 0022 0948     		ldr	r0, .L54+4
 268 0024 4FF4A471 		mov	r1, #328
 269 0028 FFF7FEFF 		bl	assert_err
 270 002c 00E0     		b	.L50
 271              	.L49:
 272 002e 1DB1     		cbz	r5, .L51
 273              	.L50:
 274 0030 A368     		ldr	r3, [r4, #8]
 275 0032 43F48073 		orr	r3, r3, #256
 276 0036 02E0     		b	.L53
 277              	.L51:
 278 0038 A368     		ldr	r3, [r4, #8]
 279 003a 23F48073 		bic	r3, r3, #256
 280              	.L53:
 281 003e A360     		str	r3, [r4, #8]
 282 0040 38BD     		pop	{r3, r4, r5, pc}
 283              	.L55:
 284 0042 00BF     		.align	2
 285              	.L54:
 286 0044 00240140 		.word	1073816576
 287 0048 00000000 		.word	.LC0
 289              		.section	.text.ADC_ITConfig,"ax",%progbits
 290              		.align	1
 291              		.global	ADC_ITConfig
 292              		.thumb
 293              		.thumb_func
 295              	ADC_ITConfig:
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298 0000 164B     		ldr	r3, .L64
 299 0002 70B5     		push	{r4, r5, r6, lr}
 300 0004 9842     		cmp	r0, r3
 301 0006 0446     		mov	r4, r0
 302 0008 0D46     		mov	r5, r1
 303 000a 1646     		mov	r6, r2
 304 000c 0CD0     		beq	.L57
 305 000e 03F58063 		add	r3, r3, #1024
 306 0012 9842     		cmp	r0, r3
 307 0014 08D0     		beq	.L57
 308 0016 03F5A053 		add	r3, r3, #5120
 309 001a 9842     		cmp	r0, r3
 310 001c 04D0     		beq	.L57
 311 001e 1048     		ldr	r0, .L64+4
 312 0020 40F26511 		movw	r1, #357
 313 0024 FFF7FEFF 		bl	assert_err
 314              	.L57:
 315 0028 012E     		cmp	r6, #1
 316 002a 04D9     		bls	.L58
 317 002c 0C48     		ldr	r0, .L64+4
 318 002e 4FF4B371 		mov	r1, #358
 319 0032 FFF7FEFF 		bl	assert_err
 320              	.L58:
 321 0036 25F4FC63 		bic	r3, r5, #2016
 322 003a 03B9     		cbnz	r3, .L59
 323 003c 25B9     		cbnz	r5, .L60
 324              	.L59:
 325 003e 0848     		ldr	r0, .L64+4
 326 0040 40F26711 		movw	r1, #359
 327 0044 FFF7FEFF 		bl	assert_err
 328              	.L60:
 329 0048 EDB2     		uxtb	r5, r5
 330 004a 6368     		ldr	r3, [r4, #4]
 331 004c 0EB1     		cbz	r6, .L61
 332 004e 1D43     		orrs	r5, r5, r3
 333 0050 01E0     		b	.L63
 334              	.L61:
 335 0052 23EA0505 		bic	r5, r3, r5
 336              	.L63:
 337 0056 6560     		str	r5, [r4, #4]
 338 0058 70BD     		pop	{r4, r5, r6, pc}
 339              	.L65:
 340 005a 00BF     		.align	2
 341              	.L64:
 342 005c 00240140 		.word	1073816576
 343 0060 00000000 		.word	.LC0
 345              		.section	.text.ADC_ResetCalibration,"ax",%progbits
 346              		.align	1
 347              		.global	ADC_ResetCalibration
 348              		.thumb
 349              		.thumb_func
 351              	ADC_ResetCalibration:
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 0B4B     		ldr	r3, .L68
 355 0002 10B5     		push	{r4, lr}
 356 0004 9842     		cmp	r0, r3
 357 0006 0446     		mov	r4, r0
 358 0008 0CD0     		beq	.L67
 359 000a 03F58063 		add	r3, r3, #1024
 360 000e 9842     		cmp	r0, r3
 361 0010 08D0     		beq	.L67
 362 0012 03F5A053 		add	r3, r3, #5120
 363 0016 9842     		cmp	r0, r3
 364 0018 04D0     		beq	.L67
 365 001a 0648     		ldr	r0, .L68+4
 366 001c 4FF4BF71 		mov	r1, #382
 367 0020 FFF7FEFF 		bl	assert_err
 368              	.L67:
 369 0024 A368     		ldr	r3, [r4, #8]
 370 0026 43F00803 		orr	r3, r3, #8
 371 002a A360     		str	r3, [r4, #8]
 372 002c 10BD     		pop	{r4, pc}
 373              	.L69:
 374 002e 00BF     		.align	2
 375              	.L68:
 376 0030 00240140 		.word	1073816576
 377 0034 00000000 		.word	.LC0
 379              		.section	.text.ADC_GetResetCalibrationStatus,"ax",%progbits
 380              		.align	1
 381              		.global	ADC_GetResetCalibrationStatus
 382              		.thumb
 383              		.thumb_func
 385              	ADC_GetResetCalibrationStatus:
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388 0000 0A4B     		ldr	r3, .L72
 389 0002 10B5     		push	{r4, lr}
 390 0004 9842     		cmp	r0, r3
 391 0006 0446     		mov	r4, r0
 392 0008 0CD0     		beq	.L71
 393 000a 03F58063 		add	r3, r3, #1024
 394 000e 9842     		cmp	r0, r3
 395 0010 08D0     		beq	.L71
 396 0012 03F5A053 		add	r3, r3, #5120
 397 0016 9842     		cmp	r0, r3
 398 0018 04D0     		beq	.L71
 399 001a 0548     		ldr	r0, .L72+4
 400 001c 4FF4C671 		mov	r1, #396
 401 0020 FFF7FEFF 		bl	assert_err
 402              	.L71:
 403 0024 A068     		ldr	r0, [r4, #8]
 404 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 405 002a 10BD     		pop	{r4, pc}
 406              	.L73:
 407              		.align	2
 408              	.L72:
 409 002c 00240140 		.word	1073816576
 410 0030 00000000 		.word	.LC0
 412              		.section	.text.ADC_StartCalibration,"ax",%progbits
 413              		.align	1
 414              		.global	ADC_StartCalibration
 415              		.thumb
 416              		.thumb_func
 418              	ADC_StartCalibration:
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421 0000 0B4B     		ldr	r3, .L76
 422 0002 10B5     		push	{r4, lr}
 423 0004 9842     		cmp	r0, r3
 424 0006 0446     		mov	r4, r0
 425 0008 0CD0     		beq	.L75
 426 000a 03F58063 		add	r3, r3, #1024
 427 000e 9842     		cmp	r0, r3
 428 0010 08D0     		beq	.L75
 429 0012 03F5A053 		add	r3, r3, #5120
 430 0016 9842     		cmp	r0, r3
 431 0018 04D0     		beq	.L75
 432 001a 0648     		ldr	r0, .L76+4
 433 001c 4FF4D271 		mov	r1, #420
 434 0020 FFF7FEFF 		bl	assert_err
 435              	.L75:
 436 0024 A368     		ldr	r3, [r4, #8]
 437 0026 43F00403 		orr	r3, r3, #4
 438 002a A360     		str	r3, [r4, #8]
 439 002c 10BD     		pop	{r4, pc}
 440              	.L77:
 441 002e 00BF     		.align	2
 442              	.L76:
 443 0030 00240140 		.word	1073816576
 444 0034 00000000 		.word	.LC0
 446              		.section	.text.ADC_GetCalibrationStatus,"ax",%progbits
 447              		.align	1
 448              		.global	ADC_GetCalibrationStatus
 449              		.thumb
 450              		.thumb_func
 452              	ADC_GetCalibrationStatus:
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 0A4B     		ldr	r3, .L80
 456 0002 10B5     		push	{r4, lr}
 457 0004 9842     		cmp	r0, r3
 458 0006 0446     		mov	r4, r0
 459 0008 0CD0     		beq	.L79
 460 000a 03F58063 		add	r3, r3, #1024
 461 000e 9842     		cmp	r0, r3
 462 0010 08D0     		beq	.L79
 463 0012 03F5A053 		add	r3, r3, #5120
 464 0016 9842     		cmp	r0, r3
 465 0018 04D0     		beq	.L79
 466 001a 0548     		ldr	r0, .L80+4
 467 001c 4FF4D971 		mov	r1, #434
 468 0020 FFF7FEFF 		bl	assert_err
 469              	.L79:
 470 0024 A068     		ldr	r0, [r4, #8]
 471 0026 C0F38000 		ubfx	r0, r0, #2, #1
 472 002a 10BD     		pop	{r4, pc}
 473              	.L81:
 474              		.align	2
 475              	.L80:
 476 002c 00240140 		.word	1073816576
 477 0030 00000000 		.word	.LC0
 479              		.section	.text.ADC_SoftwareStartConvCmd,"ax",%progbits
 480              		.align	1
 481              		.global	ADC_SoftwareStartConvCmd
 482              		.thumb
 483              		.thumb_func
 485              	ADC_SoftwareStartConvCmd:
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488 0000 38B5     		push	{r3, r4, r5, lr}
 489 0002 124B     		ldr	r3, .L89
 490 0004 0446     		mov	r4, r0
 491 0006 9842     		cmp	r0, r3
 492 0008 0D46     		mov	r5, r1
 493 000a 0CD0     		beq	.L83
 494 000c 03F58063 		add	r3, r3, #1024
 495 0010 9842     		cmp	r0, r3
 496 0012 08D0     		beq	.L83
 497 0014 03F5A053 		add	r3, r3, #5120
 498 0018 9842     		cmp	r0, r3
 499 001a 04D0     		beq	.L83
 500 001c 0C48     		ldr	r0, .L89+4
 501 001e 4FF4E671 		mov	r1, #460
 502 0022 FFF7FEFF 		bl	assert_err
 503              	.L83:
 504 0026 012D     		cmp	r5, #1
 505 0028 05D9     		bls	.L84
 506 002a 0948     		ldr	r0, .L89+4
 507 002c 40F2CD11 		movw	r1, #461
 508 0030 FFF7FEFF 		bl	assert_err
 509 0034 00E0     		b	.L85
 510              	.L84:
 511 0036 1DB1     		cbz	r5, .L86
 512              	.L85:
 513 0038 A368     		ldr	r3, [r4, #8]
 514 003a 43F4A003 		orr	r3, r3, #5242880
 515 003e 02E0     		b	.L88
 516              	.L86:
 517 0040 A368     		ldr	r3, [r4, #8]
 518 0042 23F4A003 		bic	r3, r3, #5242880
 519              	.L88:
 520 0046 A360     		str	r3, [r4, #8]
 521 0048 38BD     		pop	{r3, r4, r5, pc}
 522              	.L90:
 523 004a 00BF     		.align	2
 524              	.L89:
 525 004c 00240140 		.word	1073816576
 526 0050 00000000 		.word	.LC0
 528              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 529              		.align	1
 530              		.global	ADC_GetSoftwareStartConvStatus
 531              		.thumb
 532              		.thumb_func
 534              	ADC_GetSoftwareStartConvStatus:
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537 0000 0A4B     		ldr	r3, .L93
 538 0002 10B5     		push	{r4, lr}
 539 0004 9842     		cmp	r0, r3
 540 0006 0446     		mov	r4, r0
 541 0008 0CD0     		beq	.L92
 542 000a 03F58063 		add	r3, r3, #1024
 543 000e 9842     		cmp	r0, r3
 544 0010 08D0     		beq	.L92
 545 0012 03F5A053 		add	r3, r3, #5120
 546 0016 9842     		cmp	r0, r3
 547 0018 04D0     		beq	.L92
 548 001a 0548     		ldr	r0, .L93+4
 549 001c 40F2E511 		movw	r1, #485
 550 0020 FFF7FEFF 		bl	assert_err
 551              	.L92:
 552 0024 A068     		ldr	r0, [r4, #8]
 553 0026 C0F38050 		ubfx	r0, r0, #22, #1
 554 002a 10BD     		pop	{r4, pc}
 555              	.L94:
 556              		.align	2
 557              	.L93:
 558 002c 00240140 		.word	1073816576
 559 0030 00000000 		.word	.LC0
 561              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 562              		.align	1
 563              		.global	ADC_DiscModeChannelCountConfig
 564              		.thumb
 565              		.thumb_func
 567              	ADC_DiscModeChannelCountConfig:
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 38B5     		push	{r3, r4, r5, lr}
 571 0002 114B     		ldr	r3, .L98
 572 0004 0446     		mov	r4, r0
 573 0006 9842     		cmp	r0, r3
 574 0008 0D46     		mov	r5, r1
 575 000a 0CD0     		beq	.L96
 576 000c 03F58063 		add	r3, r3, #1024
 577 0010 9842     		cmp	r0, r3
 578 0012 08D0     		beq	.L96
 579 0014 03F5A053 		add	r3, r3, #5120
 580 0018 9842     		cmp	r0, r3
 581 001a 04D0     		beq	.L96
 582 001c 0B48     		ldr	r0, .L98+4
 583 001e 40F20221 		movw	r1, #514
 584 0022 FFF7FEFF 		bl	assert_err
 585              	.L96:
 586 0026 013D     		subs	r5, r5, #1
 587 0028 EBB2     		uxtb	r3, r5
 588 002a 072B     		cmp	r3, #7
 589 002c 04D9     		bls	.L97
 590 002e 0748     		ldr	r0, .L98+4
 591 0030 40F20321 		movw	r1, #515
 592 0034 FFF7FEFF 		bl	assert_err
 593              	.L97:
 594 0038 6368     		ldr	r3, [r4, #4]
 595 003a 23F46043 		bic	r3, r3, #57344
 596 003e 43EA4535 		orr	r5, r3, r5, lsl #13
 597 0042 6560     		str	r5, [r4, #4]
 598 0044 38BD     		pop	{r3, r4, r5, pc}
 599              	.L99:
 600 0046 00BF     		.align	2
 601              	.L98:
 602 0048 00240140 		.word	1073816576
 603 004c 00000000 		.word	.LC0
 605              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 606              		.align	1
 607              		.global	ADC_DiscModeCmd
 608              		.thumb
 609              		.thumb_func
 611              	ADC_DiscModeCmd:
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614 0000 38B5     		push	{r3, r4, r5, lr}
 615 0002 124B     		ldr	r3, .L107
 616 0004 0446     		mov	r4, r0
 617 0006 9842     		cmp	r0, r3
 618 0008 0D46     		mov	r5, r1
 619 000a 0CD0     		beq	.L101
 620 000c 03F58063 		add	r3, r3, #1024
 621 0010 9842     		cmp	r0, r3
 622 0012 08D0     		beq	.L101
 623 0014 03F5A053 		add	r3, r3, #5120
 624 0018 9842     		cmp	r0, r3
 625 001a 04D0     		beq	.L101
 626 001c 0C48     		ldr	r0, .L107+4
 627 001e 40F21B21 		movw	r1, #539
 628 0022 FFF7FEFF 		bl	assert_err
 629              	.L101:
 630 0026 012D     		cmp	r5, #1
 631 0028 05D9     		bls	.L102
 632 002a 0948     		ldr	r0, .L107+4
 633 002c 4FF40771 		mov	r1, #540
 634 0030 FFF7FEFF 		bl	assert_err
 635 0034 00E0     		b	.L103
 636              	.L102:
 637 0036 1DB1     		cbz	r5, .L104
 638              	.L103:
 639 0038 6368     		ldr	r3, [r4, #4]
 640 003a 43F40063 		orr	r3, r3, #2048
 641 003e 02E0     		b	.L106
 642              	.L104:
 643 0040 6368     		ldr	r3, [r4, #4]
 644 0042 23F40063 		bic	r3, r3, #2048
 645              	.L106:
 646 0046 6360     		str	r3, [r4, #4]
 647 0048 38BD     		pop	{r3, r4, r5, pc}
 648              	.L108:
 649 004a 00BF     		.align	2
 650              	.L107:
 651 004c 00240140 		.word	1073816576
 652 0050 00000000 		.word	.LC0
 654              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 655              		.align	1
 656              		.global	ADC_RegularChannelConfig
 657              		.thumb
 658              		.thumb_func
 660              	ADC_RegularChannelConfig:
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 664 0004 1F46     		mov	r7, r3
 665 0006 3B4B     		ldr	r3, .L119
 666 0008 0446     		mov	r4, r0
 667 000a 9842     		cmp	r0, r3
 668 000c 0D46     		mov	r5, r1
 669 000e 1646     		mov	r6, r2
 670 0010 0CD0     		beq	.L110
 671 0012 03F58063 		add	r3, r3, #1024
 672 0016 9842     		cmp	r0, r3
 673 0018 08D0     		beq	.L110
 674 001a 03F5A053 		add	r3, r3, #5120
 675 001e 9842     		cmp	r0, r3
 676 0020 04D0     		beq	.L110
 677 0022 3548     		ldr	r0, .L119+4
 678 0024 40F25221 		movw	r1, #594
 679 0028 FFF7FEFF 		bl	assert_err
 680              	.L110:
 681 002c 112D     		cmp	r5, #17
 682 002e 04D9     		bls	.L111
 683 0030 3148     		ldr	r0, .L119+4
 684 0032 40F25321 		movw	r1, #595
 685 0036 FFF7FEFF 		bl	assert_err
 686              	.L111:
 687 003a 06F1FF38 		add	r8, r6, #-1
 688 003e 5FFA88F3 		uxtb	r3, r8
 689 0042 0F2B     		cmp	r3, #15
 690 0044 04D9     		bls	.L112
 691 0046 2C48     		ldr	r0, .L119+4
 692 0048 4FF41571 		mov	r1, #596
 693 004c FFF7FEFF 		bl	assert_err
 694              	.L112:
 695 0050 072F     		cmp	r7, #7
 696 0052 04D9     		bls	.L113
 697 0054 2848     		ldr	r0, .L119+4
 698 0056 40F25521 		movw	r1, #597
 699 005a FFF7FEFF 		bl	assert_err
 700              	.L113:
 701 005e 092D     		cmp	r5, #9
 702 0060 4FF00303 		mov	r3, #3
 703 0064 0CD9     		bls	.L114
 704 0066 A5F10A02 		sub	r2, r5, #10
 705 006a 5343     		muls	r3, r2, r3
 706 006c 0722     		movs	r2, #7
 707 006e 9A40     		lsls	r2, r2, r3
 708 0070 07FA03F3 		lsl	r3, r7, r3
 709 0074 E168     		ldr	r1, [r4, #12]
 710 0076 21EA0202 		bic	r2, r1, r2
 711 007a 1343     		orrs	r3, r3, r2
 712 007c E360     		str	r3, [r4, #12]
 713 007e 09E0     		b	.L115
 714              	.L114:
 715 0080 6B43     		muls	r3, r5, r3
 716 0082 0722     		movs	r2, #7
 717 0084 9A40     		lsls	r2, r2, r3
 718 0086 9F40     		lsls	r7, r7, r3
 719 0088 2169     		ldr	r1, [r4, #16]
 720 008a 21EA0202 		bic	r2, r1, r2
 721 008e 42EA0703 		orr	r3, r2, r7
 722 0092 2361     		str	r3, [r4, #16]
 723              	.L115:
 724 0094 062E     		cmp	r6, #6
 725 0096 0FD8     		bhi	.L116
 726 0098 0523     		movs	r3, #5
 727 009a 03FB08F8 		mul	r8, r3, r8
 728 009e 1F23     		movs	r3, #31
 729 00a0 03FA08F3 		lsl	r3, r3, r8
 730 00a4 05FA08F8 		lsl	r8, r5, r8
 731 00a8 626B     		ldr	r2, [r4, #52]
 732 00aa 22EA0303 		bic	r3, r2, r3
 733 00ae 43EA0805 		orr	r5, r3, r8
 734 00b2 6563     		str	r5, [r4, #52]
 735 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 736              	.L116:
 737 00b8 0C2E     		cmp	r6, #12
 738 00ba 4FF00503 		mov	r3, #5
 739 00be 0CD8     		bhi	.L118
 740 00c0 073E     		subs	r6, r6, #7
 741 00c2 7343     		muls	r3, r6, r3
 742 00c4 1F22     		movs	r2, #31
 743 00c6 9A40     		lsls	r2, r2, r3
 744 00c8 05FA03F3 		lsl	r3, r5, r3
 745 00cc 216B     		ldr	r1, [r4, #48]
 746 00ce 21EA0202 		bic	r2, r1, r2
 747 00d2 1343     		orrs	r3, r3, r2
 748 00d4 2363     		str	r3, [r4, #48]
 749 00d6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 750              	.L118:
 751 00da 0D3E     		subs	r6, r6, #13
 752 00dc 5E43     		muls	r6, r3, r6
 753 00de 1F23     		movs	r3, #31
 754 00e0 B340     		lsls	r3, r3, r6
 755 00e2 B540     		lsls	r5, r5, r6
 756 00e4 E26A     		ldr	r2, [r4, #44]
 757 00e6 22EA0303 		bic	r3, r2, r3
 758 00ea 43EA0506 		orr	r6, r3, r5
 759 00ee E662     		str	r6, [r4, #44]
 760 00f0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 761              	.L120:
 762              		.align	2
 763              	.L119:
 764 00f4 00240140 		.word	1073816576
 765 00f8 00000000 		.word	.LC0
 767              		.section	.text.ADC_ExternalTrigConvCmd,"ax",%progbits
 768              		.align	1
 769              		.global	ADC_ExternalTrigConvCmd
 770              		.thumb
 771              		.thumb_func
 773              	ADC_ExternalTrigConvCmd:
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776 0000 38B5     		push	{r3, r4, r5, lr}
 777 0002 124B     		ldr	r3, .L128
 778 0004 0446     		mov	r4, r0
 779 0006 9842     		cmp	r0, r3
 780 0008 0D46     		mov	r5, r1
 781 000a 0CD0     		beq	.L122
 782 000c 03F58063 		add	r3, r3, #1024
 783 0010 9842     		cmp	r0, r3
 784 0012 08D0     		beq	.L122
 785 0014 03F5A053 		add	r3, r3, #5120
 786 0018 9842     		cmp	r0, r3
 787 001a 04D0     		beq	.L122
 788 001c 0C48     		ldr	r0, .L128+4
 789 001e 40F2B121 		movw	r1, #689
 790 0022 FFF7FEFF 		bl	assert_err
 791              	.L122:
 792 0026 012D     		cmp	r5, #1
 793 0028 05D9     		bls	.L123
 794 002a 0948     		ldr	r0, .L128+4
 795 002c 40F2B221 		movw	r1, #690
 796 0030 FFF7FEFF 		bl	assert_err
 797 0034 00E0     		b	.L124
 798              	.L123:
 799 0036 1DB1     		cbz	r5, .L125
 800              	.L124:
 801 0038 A368     		ldr	r3, [r4, #8]
 802 003a 43F48013 		orr	r3, r3, #1048576
 803 003e 02E0     		b	.L127
 804              	.L125:
 805 0040 A368     		ldr	r3, [r4, #8]
 806 0042 23F48013 		bic	r3, r3, #1048576
 807              	.L127:
 808 0046 A360     		str	r3, [r4, #8]
 809 0048 38BD     		pop	{r3, r4, r5, pc}
 810              	.L129:
 811 004a 00BF     		.align	2
 812              	.L128:
 813 004c 00240140 		.word	1073816576
 814 0050 00000000 		.word	.LC0
 816              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 817              		.align	1
 818              		.global	ADC_GetConversionValue
 819              		.thumb
 820              		.thumb_func
 822              	ADC_GetConversionValue:
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825 0000 0A4B     		ldr	r3, .L132
 826 0002 10B5     		push	{r4, lr}
 827 0004 9842     		cmp	r0, r3
 828 0006 0446     		mov	r4, r0
 829 0008 0CD0     		beq	.L131
 830 000a 03F58063 		add	r3, r3, #1024
 831 000e 9842     		cmp	r0, r3
 832 0010 08D0     		beq	.L131
 833 0012 03F5A053 		add	r3, r3, #5120
 834 0016 9842     		cmp	r0, r3
 835 0018 04D0     		beq	.L131
 836 001a 0548     		ldr	r0, .L132+4
 837 001c 40F2C721 		movw	r1, #711
 838 0020 FFF7FEFF 		bl	assert_err
 839              	.L131:
 840 0024 E06C     		ldr	r0, [r4, #76]
 841 0026 80B2     		uxth	r0, r0
 842 0028 10BD     		pop	{r4, pc}
 843              	.L133:
 844 002a 00BF     		.align	2
 845              	.L132:
 846 002c 00240140 		.word	1073816576
 847 0030 00000000 		.word	.LC0
 849              		.section	.text.ADC_GetDualModeConversionValue,"ax",%progbits
 850              		.align	1
 851              		.global	ADC_GetDualModeConversionValue
 852              		.thumb
 853              		.thumb_func
 855              	ADC_GetDualModeConversionValue:
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859 0000 014B     		ldr	r3, .L135
 860 0002 1868     		ldr	r0, [r3]
 861 0004 7047     		bx	lr
 862              	.L136:
 863 0006 00BF     		.align	2
 864              	.L135:
 865 0008 4C240140 		.word	1073816652
 867              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 868              		.align	1
 869              		.global	ADC_AutoInjectedConvCmd
 870              		.thumb
 871              		.thumb_func
 873              	ADC_AutoInjectedConvCmd:
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876 0000 38B5     		push	{r3, r4, r5, lr}
 877 0002 124B     		ldr	r3, .L144
 878 0004 0446     		mov	r4, r0
 879 0006 9842     		cmp	r0, r3
 880 0008 0D46     		mov	r5, r1
 881 000a 0CD0     		beq	.L138
 882 000c 03F58063 		add	r3, r3, #1024
 883 0010 9842     		cmp	r0, r3
 884 0012 08D0     		beq	.L138
 885 0014 03F5A053 		add	r3, r3, #5120
 886 0018 9842     		cmp	r0, r3
 887 001a 04D0     		beq	.L138
 888 001c 0C48     		ldr	r0, .L144+4
 889 001e 40F2E121 		movw	r1, #737
 890 0022 FFF7FEFF 		bl	assert_err
 891              	.L138:
 892 0026 012D     		cmp	r5, #1
 893 0028 05D9     		bls	.L139
 894 002a 0948     		ldr	r0, .L144+4
 895 002c 40F2E221 		movw	r1, #738
 896 0030 FFF7FEFF 		bl	assert_err
 897 0034 00E0     		b	.L140
 898              	.L139:
 899 0036 1DB1     		cbz	r5, .L141
 900              	.L140:
 901 0038 6368     		ldr	r3, [r4, #4]
 902 003a 43F48063 		orr	r3, r3, #1024
 903 003e 02E0     		b	.L143
 904              	.L141:
 905 0040 6368     		ldr	r3, [r4, #4]
 906 0042 23F48063 		bic	r3, r3, #1024
 907              	.L143:
 908 0046 6360     		str	r3, [r4, #4]
 909 0048 38BD     		pop	{r3, r4, r5, pc}
 910              	.L145:
 911 004a 00BF     		.align	2
 912              	.L144:
 913 004c 00240140 		.word	1073816576
 914 0050 00000000 		.word	.LC0
 916              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 917              		.align	1
 918              		.global	ADC_InjectedDiscModeCmd
 919              		.thumb
 920              		.thumb_func
 922              	ADC_InjectedDiscModeCmd:
 923              		@ args = 0, pretend = 0, frame = 0
 924              		@ frame_needed = 0, uses_anonymous_args = 0
 925 0000 38B5     		push	{r3, r4, r5, lr}
 926 0002 124B     		ldr	r3, .L153
 927 0004 0446     		mov	r4, r0
 928 0006 9842     		cmp	r0, r3
 929 0008 0D46     		mov	r5, r1
 930 000a 0CD0     		beq	.L147
 931 000c 03F58063 		add	r3, r3, #1024
 932 0010 9842     		cmp	r0, r3
 933 0012 08D0     		beq	.L147
 934 0014 03F5A053 		add	r3, r3, #5120
 935 0018 9842     		cmp	r0, r3
 936 001a 04D0     		beq	.L147
 937 001c 0C48     		ldr	r0, .L153+4
 938 001e 40F2FB21 		movw	r1, #763
 939 0022 FFF7FEFF 		bl	assert_err
 940              	.L147:
 941 0026 012D     		cmp	r5, #1
 942 0028 05D9     		bls	.L148
 943 002a 0948     		ldr	r0, .L153+4
 944 002c 4FF43F71 		mov	r1, #764
 945 0030 FFF7FEFF 		bl	assert_err
 946 0034 00E0     		b	.L149
 947              	.L148:
 948 0036 1DB1     		cbz	r5, .L150
 949              	.L149:
 950 0038 6368     		ldr	r3, [r4, #4]
 951 003a 43F48053 		orr	r3, r3, #4096
 952 003e 02E0     		b	.L152
 953              	.L150:
 954 0040 6368     		ldr	r3, [r4, #4]
 955 0042 23F48053 		bic	r3, r3, #4096
 956              	.L152:
 957 0046 6360     		str	r3, [r4, #4]
 958 0048 38BD     		pop	{r3, r4, r5, pc}
 959              	.L154:
 960 004a 00BF     		.align	2
 961              	.L153:
 962 004c 00240140 		.word	1073816576
 963 0050 00000000 		.word	.LC0
 965              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 966              		.align	1
 967              		.global	ADC_ExternalTrigInjectedConvConfig
 968              		.thumb
 969              		.thumb_func
 971              	ADC_ExternalTrigInjectedConvConfig:
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974 0000 38B5     		push	{r3, r4, r5, lr}
 975 0002 114B     		ldr	r3, .L164
 976 0004 0446     		mov	r4, r0
 977 0006 9842     		cmp	r0, r3
 978 0008 0D46     		mov	r5, r1
 979 000a 0CD0     		beq	.L156
 980 000c 03F58063 		add	r3, r3, #1024
 981 0010 9842     		cmp	r0, r3
 982 0012 08D0     		beq	.L156
 983 0014 03F5A053 		add	r3, r3, #5120
 984 0018 9842     		cmp	r0, r3
 985 001a 04D0     		beq	.L156
 986 001c 0B48     		ldr	r0, .L164+4
 987 001e 40F22331 		movw	r1, #803
 988 0022 FFF7FEFF 		bl	assert_err
 989              	.L156:
 990 0026 35F44053 		bics	r3, r5, #12288
 991 002a 07D0     		beq	.L157
 992 002c B3F5804F 		cmp	r3, #16384
 993 0030 04D0     		beq	.L157
 994 0032 0648     		ldr	r0, .L164+4
 995 0034 4FF44971 		mov	r1, #804
 996 0038 FFF7FEFF 		bl	assert_err
 997              	.L157:
 998 003c A368     		ldr	r3, [r4, #8]
 999 003e 23F4E043 		bic	r3, r3, #28672
 1000 0042 1D43     		orrs	r5, r5, r3
 1001 0044 A560     		str	r5, [r4, #8]
 1002 0046 38BD     		pop	{r3, r4, r5, pc}
 1003              	.L165:
 1004              		.align	2
 1005              	.L164:
 1006 0048 00240140 		.word	1073816576
 1007 004c 00000000 		.word	.LC0
 1009              		.section	.text.ADC_ExternalTrigInjectedConvCmd,"ax",%progbits
 1010              		.align	1
 1011              		.global	ADC_ExternalTrigInjectedConvCmd
 1012              		.thumb
 1013              		.thumb_func
 1015              	ADC_ExternalTrigInjectedConvCmd:
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018 0000 38B5     		push	{r3, r4, r5, lr}
 1019 0002 124B     		ldr	r3, .L173
 1020 0004 0446     		mov	r4, r0
 1021 0006 9842     		cmp	r0, r3
 1022 0008 0D46     		mov	r5, r1
 1023 000a 0CD0     		beq	.L167
 1024 000c 03F58063 		add	r3, r3, #1024
 1025 0010 9842     		cmp	r0, r3
 1026 0012 08D0     		beq	.L167
 1027 0014 03F5A053 		add	r3, r3, #5120
 1028 0018 9842     		cmp	r0, r3
 1029 001a 04D0     		beq	.L167
 1030 001c 0C48     		ldr	r0, .L173+4
 1031 001e 40F23B31 		movw	r1, #827
 1032 0022 FFF7FEFF 		bl	assert_err
 1033              	.L167:
 1034 0026 012D     		cmp	r5, #1
 1035 0028 05D9     		bls	.L168
 1036 002a 0948     		ldr	r0, .L173+4
 1037 002c 4FF44F71 		mov	r1, #828
 1038 0030 FFF7FEFF 		bl	assert_err
 1039 0034 00E0     		b	.L169
 1040              	.L168:
 1041 0036 1DB1     		cbz	r5, .L170
 1042              	.L169:
 1043 0038 A368     		ldr	r3, [r4, #8]
 1044 003a 43F40043 		orr	r3, r3, #32768
 1045 003e 02E0     		b	.L172
 1046              	.L170:
 1047 0040 A368     		ldr	r3, [r4, #8]
 1048 0042 23F40043 		bic	r3, r3, #32768
 1049              	.L172:
 1050 0046 A360     		str	r3, [r4, #8]
 1051 0048 38BD     		pop	{r3, r4, r5, pc}
 1052              	.L174:
 1053 004a 00BF     		.align	2
 1054              	.L173:
 1055 004c 00240140 		.word	1073816576
 1056 0050 00000000 		.word	.LC0
 1058              		.section	.text.ADC_SoftwareStartInjectedConvCmd,"ax",%progbits
 1059              		.align	1
 1060              		.global	ADC_SoftwareStartInjectedConvCmd
 1061              		.thumb
 1062              		.thumb_func
 1064              	ADC_SoftwareStartInjectedConvCmd:
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067 0000 38B5     		push	{r3, r4, r5, lr}
 1068 0002 124B     		ldr	r3, .L182
 1069 0004 0446     		mov	r4, r0
 1070 0006 9842     		cmp	r0, r3
 1071 0008 0D46     		mov	r5, r1
 1072 000a 0CD0     		beq	.L176
 1073 000c 03F58063 		add	r3, r3, #1024
 1074 0010 9842     		cmp	r0, r3
 1075 0012 08D0     		beq	.L176
 1076 0014 03F5A053 		add	r3, r3, #5120
 1077 0018 9842     		cmp	r0, r3
 1078 001a 04D0     		beq	.L176
 1079 001c 0C48     		ldr	r0, .L182+4
 1080 001e 4FF45571 		mov	r1, #852
 1081 0022 FFF7FEFF 		bl	assert_err
 1082              	.L176:
 1083 0026 012D     		cmp	r5, #1
 1084 0028 05D9     		bls	.L177
 1085 002a 0948     		ldr	r0, .L182+4
 1086 002c 40F25531 		movw	r1, #853
 1087 0030 FFF7FEFF 		bl	assert_err
 1088 0034 00E0     		b	.L178
 1089              	.L177:
 1090 0036 1DB1     		cbz	r5, .L179
 1091              	.L178:
 1092 0038 A368     		ldr	r3, [r4, #8]
 1093 003a 43F40213 		orr	r3, r3, #2129920
 1094 003e 02E0     		b	.L181
 1095              	.L179:
 1096 0040 A368     		ldr	r3, [r4, #8]
 1097 0042 23F40213 		bic	r3, r3, #2129920
 1098              	.L181:
 1099 0046 A360     		str	r3, [r4, #8]
 1100 0048 38BD     		pop	{r3, r4, r5, pc}
 1101              	.L183:
 1102 004a 00BF     		.align	2
 1103              	.L182:
 1104 004c 00240140 		.word	1073816576
 1105 0050 00000000 		.word	.LC0
 1107              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1108              		.align	1
 1109              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1110              		.thumb
 1111              		.thumb_func
 1113              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116 0000 0A4B     		ldr	r3, .L186
 1117 0002 10B5     		push	{r4, lr}
 1118 0004 9842     		cmp	r0, r3
 1119 0006 0446     		mov	r4, r0
 1120 0008 0CD0     		beq	.L185
 1121 000a 03F58063 		add	r3, r3, #1024
 1122 000e 9842     		cmp	r0, r3
 1123 0010 08D0     		beq	.L185
 1124 0012 03F5A053 		add	r3, r3, #5120
 1125 0016 9842     		cmp	r0, r3
 1126 0018 04D0     		beq	.L185
 1127 001a 0548     		ldr	r0, .L186+4
 1128 001c 40F26D31 		movw	r1, #877
 1129 0020 FFF7FEFF 		bl	assert_err
 1130              	.L185:
 1131 0024 A068     		ldr	r0, [r4, #8]
 1132 0026 C0F34050 		ubfx	r0, r0, #21, #1
 1133 002a 10BD     		pop	{r4, pc}
 1134              	.L187:
 1135              		.align	2
 1136              	.L186:
 1137 002c 00240140 		.word	1073816576
 1138 0030 00000000 		.word	.LC0
 1140              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1141              		.align	1
 1142              		.global	ADC_InjectedChannelConfig
 1143              		.thumb
 1144              		.thumb_func
 1146              	ADC_InjectedChannelConfig:
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1150 0002 1E46     		mov	r6, r3
 1151 0004 2A4B     		ldr	r3, .L195
 1152 0006 0446     		mov	r4, r0
 1153 0008 9842     		cmp	r0, r3
 1154 000a 0D46     		mov	r5, r1
 1155 000c 1746     		mov	r7, r2
 1156 000e 0CD0     		beq	.L189
 1157 0010 03F58063 		add	r3, r3, #1024
 1158 0014 9842     		cmp	r0, r3
 1159 0016 08D0     		beq	.L189
 1160 0018 03F5A053 		add	r3, r3, #5120
 1161 001c 9842     		cmp	r0, r3
 1162 001e 04D0     		beq	.L189
 1163 0020 2448     		ldr	r0, .L195+4
 1164 0022 40F2A631 		movw	r1, #934
 1165 0026 FFF7FEFF 		bl	assert_err
 1166              	.L189:
 1167 002a 112D     		cmp	r5, #17
 1168 002c 04D9     		bls	.L190
 1169 002e 2148     		ldr	r0, .L195+4
 1170 0030 40F2A731 		movw	r1, #935
 1171 0034 FFF7FEFF 		bl	assert_err
 1172              	.L190:
 1173 0038 7B1E     		subs	r3, r7, #1
 1174 003a DBB2     		uxtb	r3, r3
 1175 003c 032B     		cmp	r3, #3
 1176 003e 04D9     		bls	.L191
 1177 0040 1C48     		ldr	r0, .L195+4
 1178 0042 4FF46A71 		mov	r1, #936
 1179 0046 FFF7FEFF 		bl	assert_err
 1180              	.L191:
 1181 004a 072E     		cmp	r6, #7
 1182 004c 04D9     		bls	.L192
 1183 004e 1948     		ldr	r0, .L195+4
 1184 0050 40F2A931 		movw	r1, #937
 1185 0054 FFF7FEFF 		bl	assert_err
 1186              	.L192:
 1187 0058 092D     		cmp	r5, #9
 1188 005a 4FF00303 		mov	r3, #3
 1189 005e 0CD9     		bls	.L193
 1190 0060 A5F10A02 		sub	r2, r5, #10
 1191 0064 5343     		muls	r3, r2, r3
 1192 0066 0722     		movs	r2, #7
 1193 0068 9A40     		lsls	r2, r2, r3
 1194 006a 06FA03F3 		lsl	r3, r6, r3
 1195 006e E168     		ldr	r1, [r4, #12]
 1196 0070 21EA0202 		bic	r2, r1, r2
 1197 0074 1343     		orrs	r3, r3, r2
 1198 0076 E360     		str	r3, [r4, #12]
 1199 0078 09E0     		b	.L194
 1200              	.L193:
 1201 007a 6B43     		muls	r3, r5, r3
 1202 007c 0722     		movs	r2, #7
 1203 007e 9A40     		lsls	r2, r2, r3
 1204 0080 9E40     		lsls	r6, r6, r3
 1205 0082 2169     		ldr	r1, [r4, #16]
 1206 0084 21EA0202 		bic	r2, r1, r2
 1207 0088 42EA0603 		orr	r3, r2, r6
 1208 008c 2361     		str	r3, [r4, #16]
 1209              	.L194:
 1210 008e A36B     		ldr	r3, [r4, #56]
 1211 0090 0237     		adds	r7, r7, #2
 1212 0092 C3F30152 		ubfx	r2, r3, #20, #2
 1213 0096 BF1A     		subs	r7, r7, r2
 1214 0098 FFB2     		uxtb	r7, r7
 1215 009a 0522     		movs	r2, #5
 1216 009c 5743     		muls	r7, r2, r7
 1217 009e 1F22     		movs	r2, #31
 1218 00a0 BA40     		lsls	r2, r2, r7
 1219 00a2 BD40     		lsls	r5, r5, r7
 1220 00a4 23EA0203 		bic	r3, r3, r2
 1221 00a8 2B43     		orrs	r3, r3, r5
 1222 00aa A363     		str	r3, [r4, #56]
 1223 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1224              	.L196:
 1225 00ae 00BF     		.align	2
 1226              	.L195:
 1227 00b0 00240140 		.word	1073816576
 1228 00b4 00000000 		.word	.LC0
 1230              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1231              		.align	1
 1232              		.global	ADC_InjectedSequencerLengthConfig
 1233              		.thumb
 1234              		.thumb_func
 1236              	ADC_InjectedSequencerLengthConfig:
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
 1239 0000 38B5     		push	{r3, r4, r5, lr}
 1240 0002 114B     		ldr	r3, .L200
 1241 0004 0446     		mov	r4, r0
 1242 0006 9842     		cmp	r0, r3
 1243 0008 0D46     		mov	r5, r1
 1244 000a 0CD0     		beq	.L198
 1245 000c 03F58063 		add	r3, r3, #1024
 1246 0010 9842     		cmp	r0, r3
 1247 0012 08D0     		beq	.L198
 1248 0014 03F5A053 		add	r3, r3, #5120
 1249 0018 9842     		cmp	r0, r3
 1250 001a 04D0     		beq	.L198
 1251 001c 0B48     		ldr	r0, .L200+4
 1252 001e 40F2E631 		movw	r1, #998
 1253 0022 FFF7FEFF 		bl	assert_err
 1254              	.L198:
 1255 0026 013D     		subs	r5, r5, #1
 1256 0028 EBB2     		uxtb	r3, r5
 1257 002a 032B     		cmp	r3, #3
 1258 002c 04D9     		bls	.L199
 1259 002e 0748     		ldr	r0, .L200+4
 1260 0030 40F2E731 		movw	r1, #999
 1261 0034 FFF7FEFF 		bl	assert_err
 1262              	.L199:
 1263 0038 A36B     		ldr	r3, [r4, #56]
 1264 003a 23F44013 		bic	r3, r3, #3145728
 1265 003e 43EA0555 		orr	r5, r3, r5, lsl #20
 1266 0042 A563     		str	r5, [r4, #56]
 1267 0044 38BD     		pop	{r3, r4, r5, pc}
 1268              	.L201:
 1269 0046 00BF     		.align	2
 1270              	.L200:
 1271 0048 00240140 		.word	1073816576
 1272 004c 00000000 		.word	.LC0
 1274              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1275              		.align	1
 1276              		.global	ADC_SetInjectedOffset
 1277              		.thumb
 1278              		.thumb_func
 1280              	ADC_SetInjectedOffset:
 1281              		@ args = 0, pretend = 0, frame = 8
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1284 0002 0023     		movs	r3, #0
 1285 0004 0193     		str	r3, [sp, #4]
 1286 0006 184B     		ldr	r3, .L215
 1287 0008 0546     		mov	r5, r0
 1288 000a 9842     		cmp	r0, r3
 1289 000c 0C46     		mov	r4, r1
 1290 000e 1646     		mov	r6, r2
 1291 0010 0CD0     		beq	.L203
 1292 0012 03F58063 		add	r3, r3, #1024
 1293 0016 9842     		cmp	r0, r3
 1294 0018 08D0     		beq	.L203
 1295 001a 03F5A053 		add	r3, r3, #5120
 1296 001e 9842     		cmp	r0, r3
 1297 0020 04D0     		beq	.L203
 1298 0022 1248     		ldr	r0, .L215+4
 1299 0024 40F20641 		movw	r1, #1030
 1300 0028 FFF7FEFF 		bl	assert_err
 1301              	.L203:
 1302 002c 04F0F703 		and	r3, r4, #247
 1303 0030 142B     		cmp	r3, #20
 1304 0032 08D0     		beq	.L204
 1305 0034 182C     		cmp	r4, #24
 1306 0036 06D0     		beq	.L204
 1307 0038 202C     		cmp	r4, #32
 1308 003a 04D0     		beq	.L204
 1309 003c 0B48     		ldr	r0, .L215+4
 1310 003e 40F20741 		movw	r1, #1031
 1311 0042 FFF7FEFF 		bl	assert_err
 1312              	.L204:
 1313 0046 B6F5805F 		cmp	r6, #4096
 1314 004a 04D3     		bcc	.L205
 1315 004c 0748     		ldr	r0, .L215+4
 1316 004e 4FF48161 		mov	r1, #1032
 1317 0052 FFF7FEFF 		bl	assert_err
 1318              	.L205:
 1319 0056 0195     		str	r5, [sp, #4]
 1320 0058 019B     		ldr	r3, [sp, #4]
 1321 005a 1C44     		add	r4, r4, r3
 1322 005c 0194     		str	r4, [sp, #4]
 1323 005e 019B     		ldr	r3, [sp, #4]
 1324 0060 1E60     		str	r6, [r3]
 1325 0062 02B0     		add	sp, sp, #8
 1326              		@ sp needed
 1327 0064 70BD     		pop	{r4, r5, r6, pc}
 1328              	.L216:
 1329 0066 00BF     		.align	2
 1330              	.L215:
 1331 0068 00240140 		.word	1073816576
 1332 006c 00000000 		.word	.LC0
 1334              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1335              		.align	1
 1336              		.global	ADC_GetInjectedConversionValue
 1337              		.thumb
 1338              		.thumb_func
 1340              	ADC_GetInjectedConversionValue:
 1341              		@ args = 0, pretend = 0, frame = 8
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 1344 0002 0023     		movs	r3, #0
 1345 0004 0193     		str	r3, [sp, #4]
 1346 0006 144B     		ldr	r3, .L229
 1347 0008 0546     		mov	r5, r0
 1348 000a 9842     		cmp	r0, r3
 1349 000c 0C46     		mov	r4, r1
 1350 000e 0CD0     		beq	.L218
 1351 0010 03F58063 		add	r3, r3, #1024
 1352 0014 9842     		cmp	r0, r3
 1353 0016 08D0     		beq	.L218
 1354 0018 03F5A053 		add	r3, r3, #5120
 1355 001c 9842     		cmp	r0, r3
 1356 001e 04D0     		beq	.L218
 1357 0020 0E48     		ldr	r0, .L229+4
 1358 0022 40F22141 		movw	r1, #1057
 1359 0026 FFF7FEFF 		bl	assert_err
 1360              	.L218:
 1361 002a 04F0F703 		and	r3, r4, #247
 1362 002e 142B     		cmp	r3, #20
 1363 0030 08D0     		beq	.L219
 1364 0032 182C     		cmp	r4, #24
 1365 0034 06D0     		beq	.L219
 1366 0036 202C     		cmp	r4, #32
 1367 0038 04D0     		beq	.L219
 1368 003a 0848     		ldr	r0, .L229+4
 1369 003c 40F22241 		movw	r1, #1058
 1370 0040 FFF7FEFF 		bl	assert_err
 1371              	.L219:
 1372 0044 0195     		str	r5, [sp, #4]
 1373 0046 019B     		ldr	r3, [sp, #4]
 1374 0048 2833     		adds	r3, r3, #40
 1375 004a 1C44     		add	r4, r4, r3
 1376 004c 0194     		str	r4, [sp, #4]
 1377 004e 019B     		ldr	r3, [sp, #4]
 1378 0050 1868     		ldr	r0, [r3]
 1379 0052 80B2     		uxth	r0, r0
 1380 0054 03B0     		add	sp, sp, #12
 1381              		@ sp needed
 1382 0056 30BD     		pop	{r4, r5, pc}
 1383              	.L230:
 1384              		.align	2
 1385              	.L229:
 1386 0058 00240140 		.word	1073816576
 1387 005c 00000000 		.word	.LC0
 1389              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 1390              		.align	1
 1391              		.global	ADC_AnalogWatchdogCmd
 1392              		.thumb
 1393              		.thumb_func
 1395              	ADC_AnalogWatchdogCmd:
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398 0000 38B5     		push	{r3, r4, r5, lr}
 1399 0002 174B     		ldr	r3, .L243
 1400 0004 0446     		mov	r4, r0
 1401 0006 9842     		cmp	r0, r3
 1402 0008 0D46     		mov	r5, r1
 1403 000a 0CD0     		beq	.L232
 1404 000c 03F58063 		add	r3, r3, #1024
 1405 0010 9842     		cmp	r0, r3
 1406 0012 08D0     		beq	.L232
 1407 0014 03F5A053 		add	r3, r3, #5120
 1408 0018 9842     		cmp	r0, r3
 1409 001a 04D0     		beq	.L232
 1410 001c 1148     		ldr	r0, .L243+4
 1411 001e 40F23E41 		movw	r1, #1086
 1412 0022 FFF7FEFF 		bl	assert_err
 1413              	.L232:
 1414 0026 104B     		ldr	r3, .L243+8
 1415 0028 25F40002 		bic	r2, r5, #8388608
 1416 002c 9A42     		cmp	r2, r3
 1417 002e 0FD0     		beq	.L233
 1418 0030 25F40073 		bic	r3, r5, #512
 1419 0034 B3F5000F 		cmp	r3, #8388608
 1420 0038 0AD0     		beq	.L233
 1421 003a B5F5400F 		cmp	r5, #12582912
 1422 003e 07D0     		beq	.L233
 1423 0040 35F48003 		bics	r3, r5, #4194304
 1424 0044 04D0     		beq	.L233
 1425 0046 0748     		ldr	r0, .L243+4
 1426 0048 40F23F41 		movw	r1, #1087
 1427 004c FFF7FEFF 		bl	assert_err
 1428              	.L233:
 1429 0050 6368     		ldr	r3, [r4, #4]
 1430 0052 23F44003 		bic	r3, r3, #12582912
 1431 0056 23F40073 		bic	r3, r3, #512
 1432 005a 1D43     		orrs	r5, r5, r3
 1433 005c 6560     		str	r5, [r4, #4]
 1434 005e 38BD     		pop	{r3, r4, r5, pc}
 1435              	.L244:
 1436              		.align	2
 1437              	.L243:
 1438 0060 00240140 		.word	1073816576
 1439 0064 00000000 		.word	.LC0
 1440 0068 00024000 		.word	4194816
 1442              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 1443              		.align	1
 1444              		.global	ADC_AnalogWatchdogThresholdsConfig
 1445              		.thumb
 1446              		.thumb_func
 1448              	ADC_AnalogWatchdogThresholdsConfig:
 1449              		@ args = 0, pretend = 0, frame = 0
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1452 0002 134B     		ldr	r3, .L249
 1453 0004 0446     		mov	r4, r0
 1454 0006 9842     		cmp	r0, r3
 1455 0008 0E46     		mov	r6, r1
 1456 000a 1546     		mov	r5, r2
 1457 000c 0CD0     		beq	.L246
 1458 000e 03F58063 		add	r3, r3, #1024
 1459 0012 9842     		cmp	r0, r3
 1460 0014 08D0     		beq	.L246
 1461 0016 03F5A053 		add	r3, r3, #5120
 1462 001a 9842     		cmp	r0, r3
 1463 001c 04D0     		beq	.L246
 1464 001e 0D48     		ldr	r0, .L249+4
 1465 0020 40F25741 		movw	r1, #1111
 1466 0024 FFF7FEFF 		bl	assert_err
 1467              	.L246:
 1468 0028 40F6FF73 		movw	r3, #4095
 1469 002c 9E42     		cmp	r6, r3
 1470 002e 1F46     		mov	r7, r3
 1471 0030 04D9     		bls	.L247
 1472 0032 0848     		ldr	r0, .L249+4
 1473 0034 4FF48B61 		mov	r1, #1112
 1474 0038 FFF7FEFF 		bl	assert_err
 1475              	.L247:
 1476 003c BD42     		cmp	r5, r7
 1477 003e 04D9     		bls	.L248
 1478 0040 0448     		ldr	r0, .L249+4
 1479 0042 40F25941 		movw	r1, #1113
 1480 0046 FFF7FEFF 		bl	assert_err
 1481              	.L248:
 1482 004a 6662     		str	r6, [r4, #36]
 1483 004c A562     		str	r5, [r4, #40]
 1484 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1485              	.L250:
 1486              		.align	2
 1487              	.L249:
 1488 0050 00240140 		.word	1073816576
 1489 0054 00000000 		.word	.LC0
 1491              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 1492              		.align	1
 1493              		.global	ADC_AnalogWatchdogSingleChannelConfig
 1494              		.thumb
 1495              		.thumb_func
 1497              	ADC_AnalogWatchdogSingleChannelConfig:
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500 0000 38B5     		push	{r3, r4, r5, lr}
 1501 0002 0F4B     		ldr	r3, .L254
 1502 0004 0446     		mov	r4, r0
 1503 0006 9842     		cmp	r0, r3
 1504 0008 0D46     		mov	r5, r1
 1505 000a 0CD0     		beq	.L252
 1506 000c 03F58063 		add	r3, r3, #1024
 1507 0010 9842     		cmp	r0, r3
 1508 0012 08D0     		beq	.L252
 1509 0014 03F5A053 		add	r3, r3, #5120
 1510 0018 9842     		cmp	r0, r3
 1511 001a 04D0     		beq	.L252
 1512 001c 0948     		ldr	r0, .L254+4
 1513 001e 40F27D41 		movw	r1, #1149
 1514 0022 FFF7FEFF 		bl	assert_err
 1515              	.L252:
 1516 0026 112D     		cmp	r5, #17
 1517 0028 04D9     		bls	.L253
 1518 002a 0648     		ldr	r0, .L254+4
 1519 002c 40F27E41 		movw	r1, #1150
 1520 0030 FFF7FEFF 		bl	assert_err
 1521              	.L253:
 1522 0034 6368     		ldr	r3, [r4, #4]
 1523 0036 23F01F03 		bic	r3, r3, #31
 1524 003a 1D43     		orrs	r5, r5, r3
 1525 003c 6560     		str	r5, [r4, #4]
 1526 003e 38BD     		pop	{r3, r4, r5, pc}
 1527              	.L255:
 1528              		.align	2
 1529              	.L254:
 1530 0040 00240140 		.word	1073816576
 1531 0044 00000000 		.word	.LC0
 1533              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 1534              		.align	1
 1535              		.global	ADC_TempSensorVrefintCmd
 1536              		.thumb
 1537              		.thumb_func
 1539              	ADC_TempSensorVrefintCmd:
 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542 0000 0128     		cmp	r0, #1
 1543 0002 10B5     		push	{r4, lr}
 1544 0004 084C     		ldr	r4, .L262
 1545 0006 05D9     		bls	.L257
 1546 0008 0848     		ldr	r0, .L262+4
 1547 000a 40F29241 		movw	r1, #1170
 1548 000e FFF7FEFF 		bl	assert_err
 1549 0012 00E0     		b	.L258
 1550              	.L257:
 1551 0014 18B1     		cbz	r0, .L259
 1552              	.L258:
 1553 0016 A368     		ldr	r3, [r4, #8]
 1554 0018 43F40003 		orr	r3, r3, #8388608
 1555 001c 02E0     		b	.L261
 1556              	.L259:
 1557 001e A368     		ldr	r3, [r4, #8]
 1558 0020 23F40003 		bic	r3, r3, #8388608
 1559              	.L261:
 1560 0024 A360     		str	r3, [r4, #8]
 1561 0026 10BD     		pop	{r4, pc}
 1562              	.L263:
 1563              		.align	2
 1564              	.L262:
 1565 0028 00240140 		.word	1073816576
 1566 002c 00000000 		.word	.LC0
 1568              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1569              		.align	1
 1570              		.global	ADC_GetFlagStatus
 1571              		.thumb
 1572              		.thumb_func
 1574              	ADC_GetFlagStatus:
 1575              		@ args = 0, pretend = 0, frame = 0
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577 0000 38B5     		push	{r3, r4, r5, lr}
 1578 0002 134B     		ldr	r3, .L276
 1579 0004 0546     		mov	r5, r0
 1580 0006 9842     		cmp	r0, r3
 1581 0008 0C46     		mov	r4, r1
 1582 000a 0CD0     		beq	.L265
 1583 000c 03F58063 		add	r3, r3, #1024
 1584 0010 9842     		cmp	r0, r3
 1585 0012 08D0     		beq	.L265
 1586 0014 03F5A053 		add	r3, r3, #5120
 1587 0018 9842     		cmp	r0, r3
 1588 001a 04D0     		beq	.L265
 1589 001c 0D48     		ldr	r0, .L276+4
 1590 001e 40F2AF41 		movw	r1, #1199
 1591 0022 FFF7FEFF 		bl	assert_err
 1592              	.L265:
 1593 0026 631E     		subs	r3, r4, #1
 1594 0028 DBB2     		uxtb	r3, r3
 1595 002a 012B     		cmp	r3, #1
 1596 002c 0AD9     		bls	.L266
 1597 002e 042C     		cmp	r4, #4
 1598 0030 08D0     		beq	.L266
 1599 0032 082C     		cmp	r4, #8
 1600 0034 06D0     		beq	.L266
 1601 0036 102C     		cmp	r4, #16
 1602 0038 04D0     		beq	.L266
 1603 003a 0648     		ldr	r0, .L276+4
 1604 003c 4FF49661 		mov	r1, #1200
 1605 0040 FFF7FEFF 		bl	assert_err
 1606              	.L266:
 1607 0044 2B68     		ldr	r3, [r5]
 1608 0046 1C42     		tst	r4, r3
 1609 0048 0CBF     		ite	eq
 1610 004a 0020     		moveq	r0, #0
 1611 004c 0120     		movne	r0, #1
 1612 004e 38BD     		pop	{r3, r4, r5, pc}
 1613              	.L277:
 1614              		.align	2
 1615              	.L276:
 1616 0050 00240140 		.word	1073816576
 1617 0054 00000000 		.word	.LC0
 1619              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1620              		.align	1
 1621              		.global	ADC_ClearFlag
 1622              		.thumb
 1623              		.thumb_func
 1625              	ADC_ClearFlag:
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628 0000 38B5     		push	{r3, r4, r5, lr}
 1629 0002 0F4B     		ldr	r3, .L282
 1630 0004 0446     		mov	r4, r0
 1631 0006 9842     		cmp	r0, r3
 1632 0008 0D46     		mov	r5, r1
 1633 000a 0CD0     		beq	.L279
 1634 000c 03F58063 		add	r3, r3, #1024
 1635 0010 9842     		cmp	r0, r3
 1636 0012 08D0     		beq	.L279
 1637 0014 03F5A053 		add	r3, r3, #5120
 1638 0018 9842     		cmp	r0, r3
 1639 001a 04D0     		beq	.L279
 1640 001c 0948     		ldr	r0, .L282+4
 1641 001e 40F2CF41 		movw	r1, #1231
 1642 0022 FFF7FEFF 		bl	assert_err
 1643              	.L279:
 1644 0026 15F0E00F 		tst	r5, #224
 1645 002a 00D1     		bne	.L280
 1646 002c 25B9     		cbnz	r5, .L281
 1647              	.L280:
 1648 002e 0548     		ldr	r0, .L282+4
 1649 0030 4FF49A61 		mov	r1, #1232
 1650 0034 FFF7FEFF 		bl	assert_err
 1651              	.L281:
 1652 0038 ED43     		mvns	r5, r5
 1653 003a 2560     		str	r5, [r4]
 1654 003c 38BD     		pop	{r3, r4, r5, pc}
 1655              	.L283:
 1656 003e 00BF     		.align	2
 1657              	.L282:
 1658 0040 00240140 		.word	1073816576
 1659 0044 00000000 		.word	.LC0
 1661              		.section	.text.ADC_GetITStatus,"ax",%progbits
 1662              		.align	1
 1663              		.global	ADC_GetITStatus
 1664              		.thumb
 1665              		.thumb_func
 1667              	ADC_GetITStatus:
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670 0000 38B5     		push	{r3, r4, r5, lr}
 1671 0002 154B     		ldr	r3, .L298
 1672 0004 0546     		mov	r5, r0
 1673 0006 9842     		cmp	r0, r3
 1674 0008 0C46     		mov	r4, r1
 1675 000a 0CD0     		beq	.L285
 1676 000c 03F58063 		add	r3, r3, #1024
 1677 0010 9842     		cmp	r0, r3
 1678 0012 08D0     		beq	.L285
 1679 0014 03F5A053 		add	r3, r3, #5120
 1680 0018 9842     		cmp	r0, r3
 1681 001a 04D0     		beq	.L285
 1682 001c 0F48     		ldr	r0, .L298+4
 1683 001e 40F2E441 		movw	r1, #1252
 1684 0022 FFF7FEFF 		bl	assert_err
 1685              	.L285:
 1686 0026 B4F5087F 		cmp	r4, #544
 1687 002a 0AD0     		beq	.L286
 1688 002c B4F5A07F 		cmp	r4, #320
 1689 0030 07D0     		beq	.L286
 1690 0032 B4F5906F 		cmp	r4, #1152
 1691 0036 04D0     		beq	.L286
 1692 0038 0848     		ldr	r0, .L298+4
 1693 003a 40F2E541 		movw	r1, #1253
 1694 003e FFF7FEFF 		bl	assert_err
 1695              	.L286:
 1696 0042 6B68     		ldr	r3, [r5, #4]
 1697 0044 2868     		ldr	r0, [r5]
 1698 0046 10EA1420 		ands	r0, r0, r4, lsr #8
 1699 004a 04D0     		beq	.L287
 1700 004c E4B2     		uxtb	r4, r4
 1701 004e 1C42     		tst	r4, r3
 1702 0050 0CBF     		ite	eq
 1703 0052 0020     		moveq	r0, #0
 1704 0054 0120     		movne	r0, #1
 1705              	.L287:
 1706 0056 38BD     		pop	{r3, r4, r5, pc}
 1707              	.L299:
 1708              		.align	2
 1709              	.L298:
 1710 0058 00240140 		.word	1073816576
 1711 005c 00000000 		.word	.LC0
 1713              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1714              		.align	1
 1715              		.global	ADC_ClearITPendingBit
 1716              		.thumb
 1717              		.thumb_func
 1719              	ADC_ClearITPendingBit:
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722 0000 38B5     		push	{r3, r4, r5, lr}
 1723 0002 0F4B     		ldr	r3, .L304
 1724 0004 0446     		mov	r4, r0
 1725 0006 9842     		cmp	r0, r3
 1726 0008 0D46     		mov	r5, r1
 1727 000a 0CD0     		beq	.L301
 1728 000c 03F58063 		add	r3, r3, #1024
 1729 0010 9842     		cmp	r0, r3
 1730 0012 08D0     		beq	.L301
 1731 0014 03F5A053 		add	r3, r3, #5120
 1732 0018 9842     		cmp	r0, r3
 1733 001a 04D0     		beq	.L301
 1734 001c 0948     		ldr	r0, .L304+4
 1735 001e 40F20751 		movw	r1, #1287
 1736 0022 FFF7FEFF 		bl	assert_err
 1737              	.L301:
 1738 0026 25F4FC63 		bic	r3, r5, #2016
 1739 002a 03B9     		cbnz	r3, .L302
 1740 002c 25B9     		cbnz	r5, .L303
 1741              	.L302:
 1742 002e 0548     		ldr	r0, .L304+4
 1743 0030 4FF4A161 		mov	r1, #1288
 1744 0034 FFF7FEFF 		bl	assert_err
 1745              	.L303:
 1746 0038 6FEA1525 		mvn	r5, r5, lsr #8
 1747 003c 2560     		str	r5, [r4]
 1748 003e 38BD     		pop	{r3, r4, r5, pc}
 1749              	.L305:
 1750              		.align	2
 1751              	.L304:
 1752 0040 00240140 		.word	1073816576
 1753 0044 00000000 		.word	.LC0
 1755              		.section	.rodata.str1.1,"aMS",%progbits,1
 1756              	.LC0:
 1757 0000 443A2F55 		.ascii	"D:/Users/draapho/Desktop/stm32_ezos_v231/drivers/li"
 1757      73657273 
 1757      2F647261 
 1757      6170686F 
 1757      2F446573 
 1758 0033 62726172 		.ascii	"braries/STM32F10x_StdPeriph_Driver/src/stm32f10x_ad"
 1758      6965732F 
 1758      53544D33 
 1758      32463130 
 1758      785F5374 
 1759 0066 632E6300 		.ascii	"c.c\000"
 1760              		.ident	"GCC: (Sourcery CodeBench Lite 2013.11-24) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:16     .text.ADC_DeInit:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:21     .text.ADC_DeInit:00000000 ADC_DeInit
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:62     .text.ADC_DeInit:0000005c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:66     .text.ADC_Init:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:71     .text.ADC_Init:00000000 ADC_Init
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:170    .text.ADC_Init:000000d8 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:175    .text.ADC_StructInit:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:180    .text.ADC_StructInit:00000000 ADC_StructInit
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:195    .text.ADC_Cmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:200    .text.ADC_Cmd:00000000 ADC_Cmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:240    .text.ADC_Cmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:244    .text.ADC_DMACmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:249    .text.ADC_DMACmd:00000000 ADC_DMACmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:286    .text.ADC_DMACmd:00000044 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:290    .text.ADC_ITConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:295    .text.ADC_ITConfig:00000000 ADC_ITConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:342    .text.ADC_ITConfig:0000005c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:346    .text.ADC_ResetCalibration:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:351    .text.ADC_ResetCalibration:00000000 ADC_ResetCalibration
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:376    .text.ADC_ResetCalibration:00000030 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:380    .text.ADC_GetResetCalibrationStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:385    .text.ADC_GetResetCalibrationStatus:00000000 ADC_GetResetCalibrationStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:409    .text.ADC_GetResetCalibrationStatus:0000002c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:413    .text.ADC_StartCalibration:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:418    .text.ADC_StartCalibration:00000000 ADC_StartCalibration
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:443    .text.ADC_StartCalibration:00000030 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:447    .text.ADC_GetCalibrationStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:452    .text.ADC_GetCalibrationStatus:00000000 ADC_GetCalibrationStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:476    .text.ADC_GetCalibrationStatus:0000002c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:480    .text.ADC_SoftwareStartConvCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:485    .text.ADC_SoftwareStartConvCmd:00000000 ADC_SoftwareStartConvCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:525    .text.ADC_SoftwareStartConvCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:529    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:534    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:558    .text.ADC_GetSoftwareStartConvStatus:0000002c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:562    .text.ADC_DiscModeChannelCountConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:567    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:602    .text.ADC_DiscModeChannelCountConfig:00000048 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:606    .text.ADC_DiscModeCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:611    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:651    .text.ADC_DiscModeCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:655    .text.ADC_RegularChannelConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:660    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:764    .text.ADC_RegularChannelConfig:000000f4 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:768    .text.ADC_ExternalTrigConvCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:773    .text.ADC_ExternalTrigConvCmd:00000000 ADC_ExternalTrigConvCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:813    .text.ADC_ExternalTrigConvCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:817    .text.ADC_GetConversionValue:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:822    .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:846    .text.ADC_GetConversionValue:0000002c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:850    .text.ADC_GetDualModeConversionValue:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:855    .text.ADC_GetDualModeConversionValue:00000000 ADC_GetDualModeConversionValue
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:865    .text.ADC_GetDualModeConversionValue:00000008 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:868    .text.ADC_AutoInjectedConvCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:873    .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:913    .text.ADC_AutoInjectedConvCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:917    .text.ADC_InjectedDiscModeCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:922    .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:962    .text.ADC_InjectedDiscModeCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:966    .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:971    .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1006   .text.ADC_ExternalTrigInjectedConvConfig:00000048 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1010   .text.ADC_ExternalTrigInjectedConvCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1015   .text.ADC_ExternalTrigInjectedConvCmd:00000000 ADC_ExternalTrigInjectedConvCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1055   .text.ADC_ExternalTrigInjectedConvCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1059   .text.ADC_SoftwareStartInjectedConvCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1064   .text.ADC_SoftwareStartInjectedConvCmd:00000000 ADC_SoftwareStartInjectedConvCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1104   .text.ADC_SoftwareStartInjectedConvCmd:0000004c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1108   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1113   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1137   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000002c $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1141   .text.ADC_InjectedChannelConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1146   .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1227   .text.ADC_InjectedChannelConfig:000000b0 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1231   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1236   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1271   .text.ADC_InjectedSequencerLengthConfig:00000048 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1275   .text.ADC_SetInjectedOffset:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1280   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1331   .text.ADC_SetInjectedOffset:00000068 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1335   .text.ADC_GetInjectedConversionValue:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1340   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1386   .text.ADC_GetInjectedConversionValue:00000058 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1390   .text.ADC_AnalogWatchdogCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1395   .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1438   .text.ADC_AnalogWatchdogCmd:00000060 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1443   .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1448   .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1488   .text.ADC_AnalogWatchdogThresholdsConfig:00000050 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1492   .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1497   .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1530   .text.ADC_AnalogWatchdogSingleChannelConfig:00000040 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1534   .text.ADC_TempSensorVrefintCmd:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1539   .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1565   .text.ADC_TempSensorVrefintCmd:00000028 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1569   .text.ADC_GetFlagStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1574   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1616   .text.ADC_GetFlagStatus:00000050 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1620   .text.ADC_ClearFlag:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1625   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1658   .text.ADC_ClearFlag:00000040 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1662   .text.ADC_GetITStatus:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1667   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1710   .text.ADC_GetITStatus:00000058 $d
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1714   .text.ADC_ClearITPendingBit:00000000 $t
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1719   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
D:\Users\draapho\AppData\Local\Temp\ccCZQChV.s:1752   .text.ADC_ClearITPendingBit:00000040 $d

UNDEFINED SYMBOLS
assert_err
RCC_APB2PeriphResetCmd
