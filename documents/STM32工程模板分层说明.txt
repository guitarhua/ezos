STM32工程模板分层说明



--------------------------------------------------------------------------------
STM32工程模板使用了分层。
层次间只允许高层调用低层，不允许低层调用高层。
相同层次的软件可以互相调用，但必须说明调用关系。
这样便于软件模块化，移植维护也会更方便。

其层次结构如下：

         --------------- 最高层 ----------------
        |                                       |
层一    |        applications (应用层)          |
        |                                       |
         ---------------------------------------
        |                                       |
层二    |          components (组件层)          |
        |                                       |
 --------------------------------------------------------
|                  API (应用程序编程接口)                |
 --------------------------------------------------------
        |                                       |
层三    |             OS (操作系统)             |
        |                                       |
         ---------------------------------------
        |                                       |
层四    |            drivers (驱动层)           |
        |                                       |
 --------------------------------------------------------
|                CMSIS （Cortex软件标准接口）            |
 --------------------------------------------------------
        |                                       |
层五    |           libraries (芯片库)          |
        |                                       |
         --------------- 最低层 ----------------


1. applications：应用层
     - 包含了main文件, 中断处理文件, 系统配置文件
     - 不建议直接调用最底层 Libraries
     - 放在bsp中, 有利于使用不同的开发板开发应用

2. components：组件层
     - 按大功能划分的软件组件。如音频组件、UI组件
     - 不建议直接调用最底层 Libraries
     - 用户可在此处添加特定工程的组件层
     - 用户可在此处添加常用的组件层(完善模板)

3. OS：操作系统
     - 有些操作系统需要提供标准接口函数, 比drivers层高.
     - ezos操作系统与drivers同层，相互不得调用

4. drivers：PCB板级驱动
     - 如按键、EEPROM、模拟I2C等等
     - 该层要能对上屏蔽掉最底层 Libraries
       这样起到承上启下的作用,方便跨平台移植
     - 用户可在此处添加特定的驱动
     - 用户可在此处添加常用的驱动(完善模板)

5. libraries：MCU外设库
     - 此部分由芯片厂商提供，是标准库
     - 用户不得修改此层

6. bsp：板级支持包
     - applications应用层放在此包中
     - components特定工程组件层放在此包中
     - 提供开发板工程模板

7. documents：文档说明
     - 提供 doxygen 注释风格的模板，说明，软件
     - STM32工程模板说明
     - 用户可在此处添加其它说明性文件

8. API：Application Programming Interface，应用程序编程接口
     - API旨在提供软件抽象层，加快项目的开发和移植速度
     - 层一、层二的应用都应该基于API函数来使用
     - API函数由 Drivers 和 OS 提供, Libraries不得提供函数到应用接口
     - API函数必须使用标准C书写，与软件平台和硬件完全无关

9. CMSIS：Cortex Microcontroller Software Interface Standard，Cortex软件标准接口
     - CMSIS是ARM公司发布的一个标准接口，旨在提供Cortex-M处理器系列硬件抽象层
     - 仅 Drivers 和 OS 可直接调用 CMSIS 的函数
     - 目前仅提供了芯片核心部分的CMSIS，芯片外设标准库仍是由ST官方书写的
